//
//  CodegenEnvironment.cs
//
//  Author:
//       Willem Van Onsem <vanonsem.willem@gmail.com>
//
//  Copyright (c) 2014 Willem Van Onsem
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
using System;
using System.Diagnostics.Contracts;
using Resistance.Opts;
using ZincOxide.Environment;

namespace ZincOxide.Codegen.Abstract.Result {

	/// <summary>
	/// An interface describing the environment in which code should be generated (like namespaces, class names, etc.).
	/// </summary>
	[ContractClass(typeof(CodegenEnvironmentContract))]
	public interface ICodegenEnvironment {

		/// <summary>
		/// Get the namespace that should be used for code generation.
		/// </summary>
		/// <value>The namespace used in the code generation process.</value>
		[Option(Name="namespace",HelpText="The namespace that should be used for code generation")]
		string Namespace {
			get;
		}

		/// <summary>
		/// Get the prefix that should be used in front of all classes, interfaces, etc. names.
		/// </summary>
		/// <value>The prefix used in from of all classes, interfaces, etc.</value>
		[Option(Name="classprefix",HelpText="The prefix that should be used for all classes, interfaces, etc. In many cases the name of the problem that is solved.")]
		string ClassPrefix {
			get;
		}

		/// <summary>
		/// The name (or prefix) of the file(s) that will be generated by the code generator.
		/// </summary>
		/// <value>The name (or prefix) of the generated file(s).</value>
		[Option(Name="filename",HelpText="The name (or prefix) of the file(s) that will be generated.")]
		string FileName {
			get;
		}

		/// <summary>
		/// The way integers will be represented in the generated output.
		/// </summary>
		[Option(Name="integerrepresentation",HelpText="The way to represent an integer in the generated heuristics.")]
		ProgramIntegerRepresentation IntegerRepresentation {
			get;
		}

		/// <summary>
		/// The way floats will be represented in the generated output.
		/// </summary>
		[Option(Name="floatrepresentation",HelpText="The way to represent a float in the generated heuristics.")]
		ProgramFloatRepresentation FloatRepresentation {
			get;
		}
	}
}

