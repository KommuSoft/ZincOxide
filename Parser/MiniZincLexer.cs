//
//  This CSharp output file generated by Gardens Point LEX
//  Version:  1.2.1
//  Machine:  kommusoft-X75VD
//  DateTime: 9/21/2013 2:33:36 AM
//  UserName: kommusoft
//  GPLEX input file <MiniZinc.lex - 9/21/2013 2:33:34 AM>
//  GPLEX frame file <embedded resource>
//
//  Option settings: unicode, verbose, parser, stack, minimize
//  Option settings: classes, compressMap, compressNext, persistBuffer, noEmbedBuffers
//  Fallback code page: Raw 8-bit binary
//

//
// Revised backup code
// Version 1.2.1 of 24-June-2013
//
//
#define BACKUP
#define STACK
#define PERSIST

using System;
using System.IO;
using System.Text;
using System.Globalization;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Diagnostics.CodeAnalysis;

using QUT.GplexBuffers;
using QUT.Gppg;

namespace ZincOxide.Parser
{   
    /// <summary>
    /// Summary Canonical example of GPLEX automaton
    /// </summary>
    
#if STANDALONE
    //
    // These are the dummy declarations for stand-alone GPLEX applications
    // normally these declarations would come from the parser.
    // If you declare /noparser, or %option noparser then you get this.
    //

     public enum Tokens
    { 
      EOF = 0, maxParseToken = int.MaxValue 
      // must have at least these two, values are almost arbitrary
    }

     public abstract class ScanBase
    {
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public abstract int yylex();

        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yywrap")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yywrap")]
        protected virtual bool yywrap() { return true; }

#if BABEL
        protected abstract int CurrentSc { get; set; }
        // EolState is the 32-bit of state data persisted at 
        // the end of each line for Visual Studio colorization.  
        // The default is to return CurrentSc.  You must override
        // this if you want more complicated behavior.
        public virtual int EolState { 
            get { return CurrentSc; }
            set { CurrentSc = value; } 
        }
    }
    
     public interface IColorScan
    {
        void SetSource(string source, int offset);
        int GetNext(ref int state, out int start, out int end);
#endif // BABEL
    }

#endif // STANDALONE
    
    // If the compiler can't find the scanner base class maybe you
    // need to run GPPG with the /gplex option, or GPLEX with /noparser
#if BABEL
     public sealed partial class Scanner : ScanBase, IColorScan
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
        
        protected override int CurrentSc 
        {
             // The current start state is a property
             // to try to avoid the user error of setting
             // scState but forgetting to update the FSA
             // start state "currentStart"
             //
             get { return currentScOrd; }  // i.e. return YY_START;
             set { currentScOrd = value;   // i.e. BEGIN(value);
                   currentStart = startState[value]; }
        }
#else  // BABEL
     public sealed partial class Scanner : ScanBase
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
#endif // BABEL
        
        /// <summary>
        /// The input buffer for this scanner.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public ScanBuff Buffer { get { return buffer; } }
        
        private static int GetMaxParseToken() {
     System.Reflection.FieldInfo f = typeof(Tokens).GetField("maxParseToken");
            return (f == null ? int.MaxValue : (int)f.GetValue(null));
        }
        
        static int parserMax = GetMaxParseToken();
        
        enum Result {accept, noMatch, contextFound};

        const int maxAccept = 240;
        const int initial = 241;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;

#region user code
#endregion user code

        int state;
        int currentStart = startState[0];
        int code;      // last code read
        int cCol;      // column number of code
        int lNum;      // current line number
        //
        // The following instance variables are used, among other
        // things, for constructing the yylloc location objects.
        //
        int tokPos;        // buffer position at start of token
        int tokCol;        // zero-based column number at start of token
        int tokLin;        // line number at start of token
        int tokEPos;       // buffer position at end of token
        int tokECol;       // column number at end of token
        int tokELin;       // line number at end of token
        string tokTxt;     // lazily constructed text of token
#if STACK          
        private Stack<int> scStack = new Stack<int>();
#endif // STACK

#region ScannerTables
    struct Table {
        public int min; public int rng; public int dflt;
        public short[] nxt;
        public Table(int m, int x, int d, short[] n) {
            min = m; rng = x; dflt = d; nxt = n;
        }
    };

    static int[] startState = new int[] {241, 0};

#region CompressedCharacterMap
    //
    // There are 55 equivalence classes
    // There are 2 character sequence regions
    // There are 1 tables, 126 entries
    // There are 1 runs, 0 singletons
    // Decision tree depth is 1
    //
    static sbyte[] mapC0 = new sbyte[126] {
/*     '\0' */ 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x10' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x20' */ 0, 51, 54, 0, 17, 0, 0, 1, 43, 12, 50, 45, 16, 23, 21, 48, 
/*      '0' */ 24, 28, 28, 28, 28, 28, 28, 28, 20, 20, 14, 15, 49, 46, 47, 0, 
/*      '@' */ 0, 26, 26, 26, 26, 22, 26, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
/*      'P' */ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 44, 52, 13, 0, 19, 
/*      '`' */ 0, 8, 32, 33, 34, 6, 7, 39, 40, 30, 18, 18, 9, 36, 29, 27, 
/*      'p' */ 38, 18, 4, 10, 3, 5, 35, 41, 25, 31, 37, 42, 2, 11 };

    static sbyte MapC(int code)
    { // '\0' <= code <= '\U0010FFFF'
      if (code < 126) // '\0' <= code <= '}'
        return mapC0[code - 0];
      else // '~' <= code <= '\U0010FFFF'
        return (sbyte)0;
    }
#endregion

    static Table[] NxS = new Table[252] {
/* NxS[   0] */ new Table(0, 0, 0, null), // Shortest string ""
/* NxS[   1] */ new Table(0, 0, -1, null), // Shortest string "'"
/* NxS[   2] */ // Shortest string "|"
      new Table(13, 1, -1, new short[] {240}),
/* NxS[   3] */ // Shortest string "t"
      new Table(3, 39, -1, new short[] {16, 226, 227, 228, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 16, 229, 16, 16, 16, 16, 16, 16, 16, 16, 230, 
          16}),
/* NxS[   4] */ // Shortest string "r"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 221, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[   5] */ // Shortest string "u"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 217, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[   6] */ // Shortest string "e"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          206, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 207, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[   7] */ // Shortest string "f"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 191, 16, 16, 192, 
          193, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[   8] */ // Shortest string "a"
      new Table(3, 39, -1, new short[] {16, 177, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 178, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[   9] */ // Shortest string "l"
      new Table(3, 39, -1, new short[] {16, 16, 16, 172, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 173, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[  10] */ // Shortest string "s"
      new Table(3, 39, -1, new short[] {138, 16, 139, 140, 16, 141, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 142, 16, 16, 16, 143, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[  11] */ new Table(0, 0, -1, null), // Shortest string "}"
/* NxS[  12] */ new Table(0, 0, -1, null), // Shortest string ")"
/* NxS[  13] */ // Shortest string ":"
      new Table(14, 1, -1, new short[] {137}),
/* NxS[  14] */ new Table(0, 0, -1, null), // Shortest string ";"
/* NxS[  15] */ new Table(0, 0, -1, null), // Shortest string ","
/* NxS[  16] */ // Shortest string "G"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[  17] */ new Table(0, 0, -1, null), // Shortest string "_"
/* NxS[  18] */ // Shortest string "8"
      new Table(6, 23, -1, new short[] {249, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 18, 246, 249, -1, 18, -1, -1, -1, 
          18}),
/* NxS[  19] */ // Shortest string "."
      new Table(21, 1, -1, new short[] {135}),
/* NxS[  20] */ // Shortest string "-"
      new Table(23, 25, -1, new short[] {251, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 133}),
/* NxS[  21] */ // Shortest string "0"
      new Table(6, 23, -1, new short[] {249, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 18, 246, 249, -1, 18, 247, -1, 248, 
          18}),
/* NxS[  22] */ // Shortest string "x"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 127, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[  23] */ // Shortest string "o"
      new Table(3, 39, -1, new short[] {16, 16, 120, 16, 121, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 122, 16, 16, 
          16}),
/* NxS[  24] */ // Shortest string "n"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 118, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[  25] */ // Shortest string "i"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 104, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 105, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[  26] */ // Shortest string "b"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 101, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[  27] */ // Shortest string "c"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 89, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 90, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[  28] */ // Shortest string "d"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 85, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[  29] */ // Shortest string "v"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 83, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[  30] */ // Shortest string "m"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 67, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 68, 16, 16, 69, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[  31] */ // Shortest string "p"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 57, 16, 16, 16, 58, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[  32] */ // Shortest string "w"
      new Table(40, 39, 16, new short[] {53, 16, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 
          16, 16, 16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, 
          -1}),
/* NxS[  33] */ new Table(0, 0, -1, null), // Shortest string "{"
/* NxS[  34] */ new Table(0, 0, -1, null), // Shortest string "("
/* NxS[  35] */ // Shortest string "["
      new Table(2, 1, -1, new short[] {52}),
/* NxS[  36] */ // Shortest string "+"
      new Table(45, 1, -1, new short[] {51}),
/* NxS[  37] */ // Shortest string "="
      new Table(46, 1, -1, new short[] {50}),
/* NxS[  38] */ // Shortest string ">"
      new Table(46, 1, -1, new short[] {49}),
/* NxS[  39] */ // Shortest string "/"
      new Table(52, 1, -1, new short[] {48}),
/* NxS[  40] */ // Shortest string "<"
      new Table(23, 24, -1, new short[] {45, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 46}),
/* NxS[  41] */ new Table(0, 0, -1, null), // Shortest string "*"
/* NxS[  42] */ new Table(0, 0, -1, null), // Shortest string "\"\""
/* NxS[  43] */ new Table(0, 0, -1, null), // Shortest string "\\\0"
/* NxS[  44] */ new Table(0, 0, -1, null), // Shortest string "!="
/* NxS[  45] */ // Shortest string "<-"
      new Table(47, 1, -1, new short[] {47}),
/* NxS[  46] */ new Table(0, 0, -1, null), // Shortest string "<="
/* NxS[  47] */ new Table(0, 0, -1, null), // Shortest string "<->"
/* NxS[  48] */ new Table(0, 0, -1, null), // Shortest string "/\\"
/* NxS[  49] */ new Table(0, 0, -1, null), // Shortest string ">="
/* NxS[  50] */ new Table(0, 0, -1, null), // Shortest string "=="
/* NxS[  51] */ new Table(0, 0, -1, null), // Shortest string "++"
/* NxS[  52] */ new Table(0, 0, -1, null), // Shortest string "[|"
/* NxS[  53] */ // Shortest string "wh"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 54, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[  54] */ // Shortest string "whe"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 55, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[  55] */ // Shortest string "wher"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 56, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[  56] */ // Shortest string "where"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[  57] */ // Shortest string "pr"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 60, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[  58] */ // Shortest string "pa"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 59, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[  59] */ // Shortest string "par"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[  60] */ // Shortest string "pre"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 16, 61, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[  61] */ // Shortest string "pred"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 62, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[  62] */ // Shortest string "predi"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 63, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[  63] */ // Shortest string "predic"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 64, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[  64] */ // Shortest string "predica"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[  65] */ // Shortest string "predicat"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 66, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[  66] */ // Shortest string "predicate"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[  67] */ // Shortest string "ma"
      new Table(42, 39, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          77}),
/* NxS[  68] */ // Shortest string "mo"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 16, 76, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[  69] */ // Shortest string "mi"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 70, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[  70] */ // Shortest string "min"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 71, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[  71] */ // Shortest string "mini"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 72, 16, 16, 16, 16, 
          16}),
/* NxS[  72] */ // Shortest string "minim"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 73, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[  73] */ // Shortest string "minimi"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 74, 16, 16, 16, 
          16}),
/* NxS[  74] */ // Shortest string "minimiz"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 75, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[  75] */ // Shortest string "minimize"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[  76] */ // Shortest string "mod"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[  77] */ // Shortest string "max"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 78, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[  78] */ // Shortest string "maxi"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 79, 16, 16, 16, 16, 
          16}),
/* NxS[  79] */ // Shortest string "maxim"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 80, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[  80] */ // Shortest string "maximi"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 81, 16, 16, 16, 
          16}),
/* NxS[  81] */ // Shortest string "maximiz"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 82, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[  82] */ // Shortest string "maximize"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[  83] */ // Shortest string "va"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 84, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[  84] */ // Shortest string "var"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[  85] */ // Shortest string "di"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 86, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 87, 16, 16, 16, 16, 16, 
          16}),
/* NxS[  86] */ // Shortest string "dif"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 88, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[  87] */ // Shortest string "div"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[  88] */ // Shortest string "diff"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[  89] */ // Shortest string "ca"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 99, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[  90] */ // Shortest string "co"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 91, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[  91] */ // Shortest string "con"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 92, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[  92] */ // Shortest string "cons"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 93, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[  93] */ // Shortest string "const"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 94, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[  94] */ // Shortest string "constr"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 95, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[  95] */ // Shortest string "constra"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 96, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[  96] */ // Shortest string "constrai"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 97, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[  97] */ // Shortest string "constrain"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 98, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[  98] */ // Shortest string "constraint"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[  99] */ // Shortest string "cas"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 100, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 100] */ // Shortest string "case"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 101] */ // Shortest string "bo"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 102, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 102] */ // Shortest string "boo"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          103, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 103] */ // Shortest string "bool"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 104] */ // Shortest string "if"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 105] */ // Shortest string "in"
      new Table(3, 39, -1, new short[] {106, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 107, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 106] */ // Shortest string "int"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 112, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 107] */ // Shortest string "inc"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          108, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 108] */ // Shortest string "incl"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 109, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 109] */ // Shortest string "inclu"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 16, 110, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 110] */ // Shortest string "includ"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 111, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 111] */ // Shortest string "include"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 112] */ // Shortest string "inte"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 113, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 113] */ // Shortest string "inter"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 114, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 114] */ // Shortest string "inters"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 115, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 115] */ // Shortest string "interse"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 116, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 116] */ // Shortest string "intersec"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 117, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 117] */ // Shortest string "intersect"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 118] */ // Shortest string "no"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 119, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 119] */ // Shortest string "not"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 120] */ // Shortest string "ou"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 123, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 121] */ // Shortest string "of"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 122] */ // Shortest string "op"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 123] */ // Shortest string "out"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 124, 16, 16, 
          16}),
/* NxS[ 124] */ // Shortest string "outp"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 125, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 125] */ // Shortest string "outpu"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 126, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 126] */ // Shortest string "output"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 127] */ // Shortest string "xo"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 128, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 128] */ // Shortest string "xor"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 129] */ // Shortest string "0o0"
      new Table(24, 5, -1, new short[] {129, -1, -1, -1, 129}),
/* NxS[ 130] */ // Shortest string "0xe"
      new Table(6, 29, -1, new short[] {130, 130, 130, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 130, -1, 130, -1, 130, -1, 130, -1, 
          130, -1, -1, -1, 130, 130, 130}),
/* NxS[ 131] */ // Shortest string "8.8"
      new Table(6, 23, -1, new short[] {249, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 131, -1, 249, -1, 131, -1, -1, -1, 
          131}),
/* NxS[ 132] */ // Shortest string "8e8"
      new Table(20, 9, -1, new short[] {132, -1, -1, -1, 132, -1, 
          -1, -1, 132}),
/* NxS[ 133] */ new Table(0, 0, -1, null), // Shortest string "->"
/* NxS[ 134] */ new Table(0, 0, -1, null), // Shortest string "-->"
/* NxS[ 135] */ new Table(0, 0, -1, null), // Shortest string ".."
/* NxS[ 136] */ // Shortest string "$t"
      new Table(42, 37, 136, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 136, 136, 136, 136, 136, 136, 
          136, 136, -1, -1, -1, -1, -1, -1, -1, 136, 136, 136, -1, 136, -1}),
/* NxS[ 137] */ new Table(0, 0, -1, null), // Shortest string "::"
/* NxS[ 138] */ // Shortest string "st"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 168, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 139] */ // Shortest string "su"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 16, 16, 158, 16, 16, 16, 16, 16, 159, 16, 16, 
          16}),
/* NxS[ 140] */ // Shortest string "se"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 157, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 141] */ // Shortest string "sa"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 152, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 142] */ // Shortest string "so"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          149, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 143] */ // Shortest string "sy"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 144, 16, 16, 16, 16, 
          16}),
/* NxS[ 144] */ // Shortest string "sym"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 16, 145, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 145] */ // Shortest string "symd"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 146, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 146] */ // Shortest string "symdi"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 147, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 147] */ // Shortest string "symdif"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 148, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 148] */ // Shortest string "symdiff"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 149] */ // Shortest string "sol"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 150, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 150] */ // Shortest string "solv"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 151, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 151] */ // Shortest string "solve"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 152] */ // Shortest string "sat"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 153, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 153] */ // Shortest string "sati"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 154, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 154] */ // Shortest string "satis"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 155, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 155] */ // Shortest string "satisf"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 16, 156, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 156] */ // Shortest string "satisfy"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 157] */ // Shortest string "set"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 158] */ // Shortest string "sub"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 165, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 159] */ // Shortest string "sup"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 160, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 160] */ // Shortest string "supe"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 161, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 161] */ // Shortest string "super"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 162, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 162] */ // Shortest string "supers"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 163, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 163] */ // Shortest string "superse"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 164, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 164] */ // Shortest string "superset"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 165] */ // Shortest string "subs"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 166, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 166] */ // Shortest string "subse"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 167, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 167] */ // Shortest string "subset"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 168] */ // Shortest string "str"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 169, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 169] */ // Shortest string "stri"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 170, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 170] */ // Shortest string "strin"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 171, 16, 
          16}),
/* NxS[ 171] */ // Shortest string "string"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 172] */ // Shortest string "le"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 176, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 173] */ // Shortest string "li"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 174, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 174] */ // Shortest string "lis"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 175, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 175] */ // Shortest string "list"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 176] */ // Shortest string "let"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 177] */ // Shortest string "ar"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 188, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 178] */ // Shortest string "an"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 179, 16, 180, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 179] */ // Shortest string "ann"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 181, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 180] */ // Shortest string "any"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 181] */ // Shortest string "anno"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 182, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 182] */ // Shortest string "annot"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 183, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 183] */ // Shortest string "annota"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 184, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 184] */ // Shortest string "annotat"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 185, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 185] */ // Shortest string "annotati"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 186, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 186] */ // Shortest string "annotatio"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 187, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 187] */ // Shortest string "annotation"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 188] */ // Shortest string "arr"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 189, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 189] */ // Shortest string "arra"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 16, 190, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 190] */ // Shortest string "array"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 191] */ // Shortest string "fu"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 200, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 192] */ // Shortest string "fa"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          197, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 193] */ // Shortest string "fl"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 194, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 194] */ // Shortest string "flo"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 195, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 195] */ // Shortest string "floa"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 196, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 196] */ // Shortest string "float"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 197] */ // Shortest string "fal"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 198, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 198] */ // Shortest string "tru"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 199, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 199] */ // Shortest string "true"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 200] */ // Shortest string "fun"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 201, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 201] */ // Shortest string "func"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 202, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 202] */ // Shortest string "funct"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 203, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 203] */ // Shortest string "functi"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 204, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 204] */ // Shortest string "functio"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 205, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 205] */ // Shortest string "function"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 206] */ // Shortest string "el"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 213, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 207] */ // Shortest string "en"
      new Table(3, 39, -1, new short[] {16, 16, 208, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 16, 209, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 208] */ // Shortest string "enu"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 212, 16, 16, 16, 16, 
          16}),
/* NxS[ 209] */ // Shortest string "end"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 210, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 210] */ // Shortest string "endi"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 211, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 211] */ // Shortest string "endif"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 212] */ // Shortest string "enum"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 213] */ // Shortest string "els"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 214, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 214] */ // Shortest string "else"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 215, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 215] */ // Shortest string "elsei"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 216, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 216] */ // Shortest string "elseif"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 217] */ // Shortest string "un"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 218, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 218] */ // Shortest string "uni"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 219, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 219] */ // Shortest string "unio"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 220, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 220] */ // Shortest string "union"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 221] */ // Shortest string "re"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 222, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 222] */ // Shortest string "rec"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 223, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 223] */ // Shortest string "reco"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 224, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 224] */ // Shortest string "recor"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 16, 225, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 225] */ // Shortest string "record"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 226] */ // Shortest string "tr"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 198, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 227] */ // Shortest string "tu"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 237, 16, 16, 
          16}),
/* NxS[ 228] */ // Shortest string "te"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 235, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 229] */ // Shortest string "ty"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 233, 16, 16, 
          16}),
/* NxS[ 230] */ // Shortest string "th"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 231, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 231] */ // Shortest string "the"
      new Table(3, 39, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1, 16, 
          16, 16, 16, 16, 232, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16}),
/* NxS[ 232] */ // Shortest string "then"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 233] */ // Shortest string "typ"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 234, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 234] */ // Shortest string "type"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 235] */ // Shortest string "tes"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 236, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 236] */ // Shortest string "test"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 237] */ // Shortest string "tup"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          238, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 238] */ // Shortest string "tupl"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 239, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 239] */ // Shortest string "tuple"
      new Table(42, 37, 16, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 
          16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, -1, 16, -1}),
/* NxS[ 240] */ new Table(0, 0, -1, null), // Shortest string "|]"
/* NxS[ 241] */ // Shortest string ""
      new Table(41, 53, 16, new short[] {32, 33, 34, 35, 36, 37, 
          38, 39, 40, 41, 243, 244, -1, 245, -1, 1, 2, 3, 4, 5, 6, 7, 
          8, 9, 10, 11, 12, -1, 13, 14, 15, 242, 16, 17, 18, 19, 16, 20, 
          21, 22, 16, 23, 18, 24, 25, 16, 26, 27, 28, 29, 30, 16, 31}),
/* NxS[ 242] */ // Shortest string "$"
      new Table(3, 39, -1, new short[] {136, 136, 136, 136, 136, 136, 
          136, 136, -1, -1, -1, -1, -1, -1, -1, 136, -1, -1, -1, 136, -1, -1, 
          136, 136, 136, -1, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 
          136}),
/* NxS[ 243] */ // Shortest string "!"
      new Table(46, 1, -1, new short[] {44}),
/* NxS[ 244] */ // Shortest string "\\"
      new Table(53, 1, -1, new short[] {43}),
/* NxS[ 245] */ // Shortest string "\""
      new Table(54, 1, 245, new short[] {42}),
/* NxS[ 246] */ // Shortest string "8."
      new Table(20, 9, -1, new short[] {131, -1, -1, -1, 131, -1, 
          -1, -1, 131}),
/* NxS[ 247] */ // Shortest string "0x"
      new Table(6, 29, -1, new short[] {130, 130, 130, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 130, -1, 130, -1, 130, -1, 130, -1, 
          130, -1, -1, -1, 130, 130, 130}),
/* NxS[ 248] */ // Shortest string "0o"
      new Table(24, 5, -1, new short[] {129, -1, -1, -1, 129}),
/* NxS[ 249] */ // Shortest string "8e"
      new Table(20, 26, -1, new short[] {132, -1, -1, 250, 132, -1, 
          -1, -1, 132, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 250}),
/* NxS[ 250] */ // Shortest string "8e-"
      new Table(20, 9, -1, new short[] {132, -1, -1, -1, 132, -1, 
          -1, -1, 132}),
/* NxS[ 251] */ // Shortest string "--"
      new Table(47, 1, -1, new short[] {134}),
    };

int NextState() {
    if (code == ScanBuff.EndOfFile)
        return eofNum;
    else
        unchecked {
            int rslt;
            int idx = MapC(code) - NxS[state].min;
            if (idx < 0) idx += 55;
            if ((uint)idx >= (uint)NxS[state].rng) rslt = NxS[state].dflt;
            else rslt = NxS[state].nxt[idx];
            return rslt;
        }
}

#endregion


#if BACKUP
        // ==============================================================
        // == Nested struct used for backup in automata that do backup ==
        // ==============================================================

        struct Context // class used for automaton backup.
        {
            public int bPos;
            public int rPos; // scanner.readPos saved value
            public int cCol;
            public int lNum; // Need this in case of backup over EOL.
            public int state;
            public int cChr;
        }
        
        private Context ctx = new Context();
#endif // BACKUP

        // ==============================================================
        // ==== Nested struct to support input switching in scanners ====
        // ==============================================================

		struct BufferContext {
            internal ScanBuff buffSv;
			internal int chrSv;
			internal int cColSv;
			internal int lNumSv;
		}

        // ==============================================================
        // ===== Private methods to save and restore buffer contexts ====
        // ==============================================================

        /// <summary>
        /// This method creates a buffer context record from
        /// the current buffer object, together with some
        /// scanner state values. 
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        BufferContext MkBuffCtx()
		{
			BufferContext rslt;
			rslt.buffSv = this.buffer;
			rslt.chrSv = this.code;
			rslt.cColSv = this.cCol;
			rslt.lNumSv = this.lNum;
			return rslt;
		}

        /// <summary>
        /// This method restores the buffer value and allied
        /// scanner state from the given context record value.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void RestoreBuffCtx(BufferContext value)
		{
			this.buffer = value.buffSv;
			this.code = value.chrSv;
			this.cCol = value.cColSv;
			this.lNum = value.lNumSv;
        } 
        // =================== End Nested classes =======================

#if !NOFILES
     public Scanner(Stream file) {
            SetSource(file, -1); // unicode option
        }

        public Scanner(Stream file, string codepage) {
            SetSource(file, CodePageHandling.GetCodePage(codepage));
        }   
#endif // !NOFILES

     public Scanner() { }

        private int readPos;

        void GetCode()
        {
            if (code == '\n')  // This needs to be fixed for other conventions
                               // i.e. [\r\n\205\u2028\u2029]
            { 
                cCol = -1;
                lNum++;
            }
            readPos = buffer.Pos;

            // Now read new codepoint.
            code = buffer.Read();
            if (code > ScanBuff.EndOfFile)
            {
#if (!BYTEMODE)
                if (code >= 0xD800 && code <= 0xDBFF)
                {
                    int next = buffer.Read();
                    if (next < 0xDC00 || next > 0xDFFF)
                        code = ScanBuff.UnicodeReplacementChar;
                    else
                        code = (0x10000 + ((code & 0x3FF) << 10) + (next & 0x3FF));
                }
#endif
                cCol++;
            }
        }

        void MarkToken()
        {
#if (!PERSIST)
            buffer.Mark();
#endif
            tokPos = readPos;
            tokLin = lNum;
            tokCol = cCol;
        }
        
        void MarkEnd()
        {
            tokTxt = null;
            tokEPos = readPos;
            tokELin = lNum;
            tokECol = cCol;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int Peek()
        {
            int rslt, codeSv = code, cColSv = cCol, lNumSv = lNum, bPosSv = buffer.Pos;
            GetCode(); rslt = code;
            lNum = lNumSv; cCol = cColSv; code = codeSv; buffer.Pos = bPosSv;
            return rslt;
        }

        // ==============================================================
        // =====    Initialization of string-based input buffers     ====
        // ==============================================================

        /// <summary>
        /// Create and initialize a StringBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the input string</param>
        /// <param name="offset">starting offset in the string</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(string source, int offset)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.buffer.Pos = offset;
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }

        // ================ LineBuffer Initialization ===================
        /// <summary>
        /// Create and initialize a LineBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the list of input strings</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(IList<string> source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            this.lNum = 0;
            GetCode();
        }

#if !NOFILES        
        // =============== StreamBuffer Initialization ==================

        /// <summary>
        /// Create and initialize a StreamBuff buffer object for this scanner.
        /// StreamBuff is buffer for 8-bit byte files.
        /// </summary>
        /// <param name="source">the input byte stream</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
        
#if !BYTEMODE
        // ================ TextBuffer Initialization ===================

        /// <summary>
        /// Create and initialize a TextBuff buffer object for this scanner.
        /// TextBuff is a buffer for encoded unicode files.
        /// </summary>
        /// <param name="source">the input text file</param>
        /// <param name="fallbackCodePage">Code page to use if file has
        /// no BOM. For 0, use machine default; for -1, 8-bit binary</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source, int fallbackCodePage)
        {
            this.buffer = ScanBuff.GetBuffer(source, fallbackCodePage);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
#endif // !BYTEMODE
#endif // !NOFILES
        
        // ==============================================================

#if BABEL
        //
        //  Get the next token for Visual Studio
        //
        //  "state" is the inout mode variable that maintains scanner
        //  state between calls, using the EolState property. In principle,
        //  if the calls of EolState are costly set could be called once
        //  only per line, at the start; and get called only at the end
        //  of the line. This needs more infrastructure ...
        //
        public int GetNext(ref int state, out int start, out int end)
        {
                Tokens next;
            int s, e;
            s = state;        // state at start
            EolState = state;
                next = (Tokens)Scan();
            state = EolState;
            e = state;       // state at end;
            start = tokPos;
            end = tokEPos - 1; // end is the index of last char.
            return (int)next;
        }        
#endif // BABEL

        // ======== AbstractScanner<> Implementation =========

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public override int yylex()
        {
            // parserMax is set by reflecting on the Tokens
            // enumeration.  If maxParseToken is defined
            // that is used, otherwise int.MaxValue is used.
            int next;
            do { next = Scan(); } while (next >= parserMax);
            return next;
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yypos { get { return tokPos; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yyline { get { return tokLin; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yycol { get { return tokCol; } }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yytext")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yytext")]
        public string yytext
        {
            get 
            {
                if (tokTxt == null) 
                    tokTxt = buffer.GetString(tokPos, tokEPos);
                return tokTxt;
            }
        }

        /// <summary>
        /// Discards all but the first "n" codepoints in the recognized pattern.
        /// Resets the buffer position so that only n codepoints have been consumed;
        /// yytext is also re-evaluated. 
        /// </summary>
        /// <param name="n">The number of codepoints to consume</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void yyless(int n)
        {
            buffer.Pos = tokPos;
            // Must read at least one char, so set before start.
            cCol = tokCol - 1; 
            GetCode();
            // Now ensure that line counting is correct.
            lNum = tokLin;
            // And count the rest of the text.
            for (int i = 0; i < n; i++) GetCode();
            MarkEnd();
        }
       
        //
        //  It would be nice to count backward in the text
        //  but it does not seem possible to re-establish
        //  the correct column counts except by going forward.
        //
        /// <summary>
        /// Removes the last "n" code points from the pattern.
        /// </summary>
        /// <param name="n">The number to remove</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void _yytrunc(int n) { yyless(yyleng - n); }
        
        //
        // This is painful, but we no longer count
        // codepoints.  For the overwhelming majority 
        // of cases the single line code is fast, for
        // the others, well, at least it is all in the
        // buffer so no files are touched. Note that we
        // can't use (tokEPos - tokPos) because of the
        // possibility of surrogate pairs in the token.
        //
        /// <summary>
        /// The length of the pattern in codepoints (not the same as 
        /// string-length if the pattern contains any surrogate pairs).
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yyleng")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yyleng")]
        public int yyleng
        {
            get {
                if (tokELin == tokLin)
                    return tokECol - tokCol;
                else
#if BYTEMODE
                    return tokEPos - tokPos;
#else
                {
                    int ch;
                    int count = 0;
                    int save = buffer.Pos;
                    buffer.Pos = tokPos;
                    do {
                        ch = buffer.Read();
                        if (!char.IsHighSurrogate((char)ch)) count++;
                    } while (buffer.Pos < tokEPos && ch != ScanBuff.EndOfFile);
                    buffer.Pos = save;
                    return count;
                }
#endif // BYTEMODE
            }
        }
        
        // ============ methods available in actions ==============

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int YY_START {
            get { return currentScOrd; }
            set { currentScOrd = value; 
                  currentStart = startState[value]; 
            } 
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void BEGIN(int next) {
            currentScOrd = next;
            currentStart = startState[next];
        }

        // ============== The main tokenizer code =================

        int Scan() {
                for (; ; ) {
                    int next;              // next state to enter
                    bool contextSaved = false;
#if LEFTANCHORS
                    for (;;) {
                        // Discard characters that do not start any pattern.
                        // Must check the left anchor condition after *every* GetCode!
                        state = ((cCol == 0) ? anchorState[currentScOrd] : currentStart);
                        if ((next = NextState()) != goStart) break; // LOOP EXIT HERE...
                        GetCode();
                    }
                    
#else // !LEFTANCHORS
                    state = currentStart;
                    while ((next = NextState()) == goStart) {
                        // At this point, the current character has no
                        // transition from the current state.  We discard 
                        // the "no-match" char.   In traditional LEX such 
                        // characters are echoed to the console.
                        GetCode();
                    }
#endif // LEFTANCHORS                    
                    // At last, a valid transition ...    
                    MarkToken();
                    state = next;
                    GetCode();                    
#if BACKUP
                    while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                        if (state <= maxAccept && next > maxAccept) { // need to prepare backup data
                            // Store data for the *latest* accept state that was found.
                            SaveStateAndPos( ref ctx );
                            contextSaved = true;
                        }
                        state = next;
                        GetCode();
                    }
                    if (state > maxAccept && contextSaved)
                        RestoreStateAndPos( ref ctx );
#else  // BACKUP
                    while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                         state = next;
                         GetCode();
                    }
#endif // BACKUP
                    if (state <= maxAccept) {
                        MarkEnd();
#region ActionSwitch
#pragma warning disable 162, 1522
    switch (state)
    {
        case eofNum:
            if (yywrap())
                return (int)Tokens.EOF;
            break;
        case 1: // Recognized '{ACCENT}',	Shortest string "'"
return (int) Tokens.ACCENT
            break;
        case 2: // Recognized '{BAR}',	Shortest string "|"
return (int) Tokens.BAR
            break;
        case 3: // Recognized '{IDENT}',	Shortest string "t"
        case 4: // Recognized '{IDENT}',	Shortest string "r"
        case 5: // Recognized '{IDENT}',	Shortest string "u"
        case 6: // Recognized '{IDENT}',	Shortest string "e"
        case 7: // Recognized '{IDENT}',	Shortest string "f"
        case 8: // Recognized '{IDENT}',	Shortest string "a"
        case 9: // Recognized '{IDENT}',	Shortest string "l"
        case 10: // Recognized '{IDENT}',	Shortest string "s"
        case 16: // Recognized '{IDENT}',	Shortest string "G"
        case 22: // Recognized '{IDENT}',	Shortest string "x"
        case 23: // Recognized '{IDENT}',	Shortest string "o"
        case 24: // Recognized '{IDENT}',	Shortest string "n"
        case 25: // Recognized '{IDENT}',	Shortest string "i"
        case 26: // Recognized '{IDENT}',	Shortest string "b"
        case 27: // Recognized '{IDENT}',	Shortest string "c"
        case 28: // Recognized '{IDENT}',	Shortest string "d"
        case 29: // Recognized '{IDENT}',	Shortest string "v"
        case 30: // Recognized '{IDENT}',	Shortest string "m"
        case 31: // Recognized '{IDENT}',	Shortest string "p"
        case 32: // Recognized '{IDENT}',	Shortest string "w"
        case 53: // Recognized '{IDENT}',	Shortest string "wh"
        case 54: // Recognized '{IDENT}',	Shortest string "whe"
        case 55: // Recognized '{IDENT}',	Shortest string "wher"
        case 57: // Recognized '{IDENT}',	Shortest string "pr"
        case 58: // Recognized '{IDENT}',	Shortest string "pa"
        case 60: // Recognized '{IDENT}',	Shortest string "pre"
        case 61: // Recognized '{IDENT}',	Shortest string "pred"
        case 62: // Recognized '{IDENT}',	Shortest string "predi"
        case 63: // Recognized '{IDENT}',	Shortest string "predic"
        case 64: // Recognized '{IDENT}',	Shortest string "predica"
        case 65: // Recognized '{IDENT}',	Shortest string "predicat"
        case 67: // Recognized '{IDENT}',	Shortest string "ma"
        case 68: // Recognized '{IDENT}',	Shortest string "mo"
        case 69: // Recognized '{IDENT}',	Shortest string "mi"
        case 70: // Recognized '{IDENT}',	Shortest string "min"
        case 71: // Recognized '{IDENT}',	Shortest string "mini"
        case 72: // Recognized '{IDENT}',	Shortest string "minim"
        case 73: // Recognized '{IDENT}',	Shortest string "minimi"
        case 74: // Recognized '{IDENT}',	Shortest string "minimiz"
        case 77: // Recognized '{IDENT}',	Shortest string "max"
        case 78: // Recognized '{IDENT}',	Shortest string "maxi"
        case 79: // Recognized '{IDENT}',	Shortest string "maxim"
        case 80: // Recognized '{IDENT}',	Shortest string "maximi"
        case 81: // Recognized '{IDENT}',	Shortest string "maximiz"
        case 83: // Recognized '{IDENT}',	Shortest string "va"
        case 85: // Recognized '{IDENT}',	Shortest string "di"
        case 86: // Recognized '{IDENT}',	Shortest string "dif"
        case 89: // Recognized '{IDENT}',	Shortest string "ca"
        case 90: // Recognized '{IDENT}',	Shortest string "co"
        case 91: // Recognized '{IDENT}',	Shortest string "con"
        case 92: // Recognized '{IDENT}',	Shortest string "cons"
        case 93: // Recognized '{IDENT}',	Shortest string "const"
        case 94: // Recognized '{IDENT}',	Shortest string "constr"
        case 95: // Recognized '{IDENT}',	Shortest string "constra"
        case 96: // Recognized '{IDENT}',	Shortest string "constrai"
        case 97: // Recognized '{IDENT}',	Shortest string "constrain"
        case 99: // Recognized '{IDENT}',	Shortest string "cas"
        case 101: // Recognized '{IDENT}',	Shortest string "bo"
        case 102: // Recognized '{IDENT}',	Shortest string "boo"
        case 107: // Recognized '{IDENT}',	Shortest string "inc"
        case 108: // Recognized '{IDENT}',	Shortest string "incl"
        case 109: // Recognized '{IDENT}',	Shortest string "inclu"
        case 110: // Recognized '{IDENT}',	Shortest string "includ"
        case 112: // Recognized '{IDENT}',	Shortest string "inte"
        case 113: // Recognized '{IDENT}',	Shortest string "inter"
        case 114: // Recognized '{IDENT}',	Shortest string "inters"
        case 115: // Recognized '{IDENT}',	Shortest string "interse"
        case 116: // Recognized '{IDENT}',	Shortest string "intersec"
        case 118: // Recognized '{IDENT}',	Shortest string "no"
        case 120: // Recognized '{IDENT}',	Shortest string "ou"
        case 123: // Recognized '{IDENT}',	Shortest string "out"
        case 124: // Recognized '{IDENT}',	Shortest string "outp"
        case 125: // Recognized '{IDENT}',	Shortest string "outpu"
        case 127: // Recognized '{IDENT}',	Shortest string "xo"
        case 138: // Recognized '{IDENT}',	Shortest string "st"
        case 139: // Recognized '{IDENT}',	Shortest string "su"
        case 140: // Recognized '{IDENT}',	Shortest string "se"
        case 141: // Recognized '{IDENT}',	Shortest string "sa"
        case 142: // Recognized '{IDENT}',	Shortest string "so"
        case 143: // Recognized '{IDENT}',	Shortest string "sy"
        case 144: // Recognized '{IDENT}',	Shortest string "sym"
        case 145: // Recognized '{IDENT}',	Shortest string "symd"
        case 146: // Recognized '{IDENT}',	Shortest string "symdi"
        case 147: // Recognized '{IDENT}',	Shortest string "symdif"
        case 149: // Recognized '{IDENT}',	Shortest string "sol"
        case 150: // Recognized '{IDENT}',	Shortest string "solv"
        case 152: // Recognized '{IDENT}',	Shortest string "sat"
        case 153: // Recognized '{IDENT}',	Shortest string "sati"
        case 154: // Recognized '{IDENT}',	Shortest string "satis"
        case 155: // Recognized '{IDENT}',	Shortest string "satisf"
        case 158: // Recognized '{IDENT}',	Shortest string "sub"
        case 159: // Recognized '{IDENT}',	Shortest string "sup"
        case 160: // Recognized '{IDENT}',	Shortest string "supe"
        case 161: // Recognized '{IDENT}',	Shortest string "super"
        case 162: // Recognized '{IDENT}',	Shortest string "supers"
        case 163: // Recognized '{IDENT}',	Shortest string "superse"
        case 165: // Recognized '{IDENT}',	Shortest string "subs"
        case 166: // Recognized '{IDENT}',	Shortest string "subse"
        case 168: // Recognized '{IDENT}',	Shortest string "str"
        case 169: // Recognized '{IDENT}',	Shortest string "stri"
        case 170: // Recognized '{IDENT}',	Shortest string "strin"
        case 172: // Recognized '{IDENT}',	Shortest string "le"
        case 173: // Recognized '{IDENT}',	Shortest string "li"
        case 174: // Recognized '{IDENT}',	Shortest string "lis"
        case 177: // Recognized '{IDENT}',	Shortest string "ar"
        case 178: // Recognized '{IDENT}',	Shortest string "an"
        case 181: // Recognized '{IDENT}',	Shortest string "anno"
        case 182: // Recognized '{IDENT}',	Shortest string "annot"
        case 183: // Recognized '{IDENT}',	Shortest string "annota"
        case 184: // Recognized '{IDENT}',	Shortest string "annotat"
        case 185: // Recognized '{IDENT}',	Shortest string "annotati"
        case 186: // Recognized '{IDENT}',	Shortest string "annotatio"
        case 188: // Recognized '{IDENT}',	Shortest string "arr"
        case 189: // Recognized '{IDENT}',	Shortest string "arra"
        case 191: // Recognized '{IDENT}',	Shortest string "fu"
        case 192: // Recognized '{IDENT}',	Shortest string "fa"
        case 193: // Recognized '{IDENT}',	Shortest string "fl"
        case 194: // Recognized '{IDENT}',	Shortest string "flo"
        case 195: // Recognized '{IDENT}',	Shortest string "floa"
        case 197: // Recognized '{IDENT}',	Shortest string "fal"
        case 198: // Recognized '{IDENT}',	Shortest string "tru"
        case 200: // Recognized '{IDENT}',	Shortest string "fun"
        case 201: // Recognized '{IDENT}',	Shortest string "func"
        case 202: // Recognized '{IDENT}',	Shortest string "funct"
        case 203: // Recognized '{IDENT}',	Shortest string "functi"
        case 204: // Recognized '{IDENT}',	Shortest string "functio"
        case 206: // Recognized '{IDENT}',	Shortest string "el"
        case 207: // Recognized '{IDENT}',	Shortest string "en"
        case 208: // Recognized '{IDENT}',	Shortest string "enu"
        case 209: // Recognized '{IDENT}',	Shortest string "end"
        case 210: // Recognized '{IDENT}',	Shortest string "endi"
        case 213: // Recognized '{IDENT}',	Shortest string "els"
        case 215: // Recognized '{IDENT}',	Shortest string "elsei"
        case 217: // Recognized '{IDENT}',	Shortest string "un"
        case 218: // Recognized '{IDENT}',	Shortest string "uni"
        case 219: // Recognized '{IDENT}',	Shortest string "unio"
        case 221: // Recognized '{IDENT}',	Shortest string "re"
        case 222: // Recognized '{IDENT}',	Shortest string "rec"
        case 223: // Recognized '{IDENT}',	Shortest string "reco"
        case 224: // Recognized '{IDENT}',	Shortest string "recor"
        case 226: // Recognized '{IDENT}',	Shortest string "tr"
        case 227: // Recognized '{IDENT}',	Shortest string "tu"
        case 228: // Recognized '{IDENT}',	Shortest string "te"
        case 229: // Recognized '{IDENT}',	Shortest string "ty"
        case 230: // Recognized '{IDENT}',	Shortest string "th"
        case 231: // Recognized '{IDENT}',	Shortest string "the"
        case 233: // Recognized '{IDENT}',	Shortest string "typ"
        case 235: // Recognized '{IDENT}',	Shortest string "tes"
        case 237: // Recognized '{IDENT}',	Shortest string "tup"
        case 238: // Recognized '{IDENT}',	Shortest string "tupl"
return (int) Tokens.IDENT
            break;
        case 11: // Recognized '{CACC}',	Shortest string "}"
return (int) Tokens.CACC
            break;
        case 12: // Recognized '{CBRK}',	Shortest string ")"
return (int) Tokens.CBRK
            break;
        case 13: // Recognized '{COLON}',	Shortest string ":"
return (int) Tokens.COLON
            break;
        case 14: // Recognized '{COMMAD}',	Shortest string ";"
return (int) Tokens.COMMAD
            break;
        case 15: // Recognized '{COMMA}',	Shortest string ","
return (int) Tokens.COMMA
            break;
        case 17: // Recognized '{OPUNDSC}',	Shortest string "_"
return (int) Tokens.OPUNDSC
            break;
        case 18: // Recognized '{INTLI}',	Shortest string "8"
        case 21: // Recognized '{INTLI}',	Shortest string "0"
        case 129: // Recognized '{INTLI}',	Shortest string "0o0"
        case 130: // Recognized '{INTLI}',	Shortest string "0xe"
return (int) Tokens.INTLI
            break;
        case 19: // Recognized '{OPDOT}',	Shortest string "."
return (int) Tokens.OPDOT
            break;
        case 20: // Recognized '{OPSUB}',	Shortest string "-"
return (int) Tokens.OPSUB
            break;
        case 33: // Recognized '{OACC}',	Shortest string "{"
return (int) Tokens.OACC
            break;
        case 34: // Recognized '{OBRK}',	Shortest string "("
return (int) Tokens.OBRK
            break;
        case 35: // Recognized '{OFBR}',	Shortest string "["
return (int) Tokens.OFBR
            break;
        case 36: // Recognized '{OPADD}',	Shortest string "+"
return (int) Tokens.OPADD
            break;
        case 37: // Recognized '{OPASSIG}',	Shortest string "="
return (int) Tokens.OPASSIG
            break;
        case 38: // Recognized '{OPGRETA}',	Shortest string ">"
return (int) Tokens.OPGRETA
            break;
        case 39: // Recognized '{OPDIV}',	Shortest string "/"
return (int) Tokens.OPDIV
            break;
        case 40: // Recognized '{OPLESTA}',	Shortest string "<"
return (int) Tokens.OPLESTA
            break;
        case 41: // Recognized '{OPMUL}',	Shortest string "*"
return (int) Tokens.OPMUL
            break;
        case 42: // Recognized '{STRLI}',	Shortest string "\"\""
return (int) Tokens.STRLI
            break;
        case 43: // Recognized '{OPVEE}',	Shortest string "\\\0"
yyless(1); 
return (int) Tokens.OPVEE
            break;
        case 44: // Recognized '{OPNEQUA}',	Shortest string "!="
return (int) Tokens.OPNEQUA
            break;
        case 45: // Recognized '{OPRIMPL}',	Shortest string "<-"
return (int) Tokens.OPRIMPL
            break;
        case 46: // Recognized '{OPLESEQ}',	Shortest string "<="
return (int) Tokens.OPLESEQ
            break;
        case 47: // Recognized '{OPEQUIV}',	Shortest string "<->"
return (int) Tokens.OPEQUIV
            break;
        case 48: // Recognized '{OPWEDGE}',	Shortest string "/\\"
return (int) Tokens.OPWEDGE
            break;
        case 49: // Recognized '{OPGEAEQ}',	Shortest string ">="
return (int) Tokens.OPGAEQ
            break;
        case 50: // Recognized '{OPEQUAL}',	Shortest string "=="
return (int) Tokens.OPEQUAL
            break;
        case 51: // Recognized '{OPINCRE}',	Shortest string "++"
return (int) Tokens.OPINCRE
            break;
        case 52: // Recognized '{OFBA}',	Shortest string "[|"
return (int) Tokens.OFBA
            break;
        case 56: // Recognized '{KWWHER}',	Shortest string "where"
return (int) Tokens.KWWHER
            break;
        case 59: // Recognized '{KWPAR}',	Shortest string "par"
return (int) Tokens.KWPAR
            break;
        case 66: // Recognized '{KWPRED}',	Shortest string "predicate"
return (int) Tokens.KWPRED
            break;
        case 75: // Recognized '{KWMINI}',	Shortest string "minimize"
return (int) Tokens.KWMINI
            break;
        case 76: // Recognized '{KWMOD}',	Shortest string "mod"
return (int) Tokens.KWMOD
            break;
        case 82: // Recognized '{KWMAXI}',	Shortest string "maximize"
return (int) Tokens.KWMAXI
            break;
        case 84: // Recognized '{KWVAR}',	Shortest string "var"
return (int) Tokens.KWVAR
            break;
        case 87: // Recognized '{KWDIV}',	Shortest string "div"
return (int) Tokens.KWDIV
            break;
        case 88: // Recognized '{KWDIFF}',	Shortest string "diff"
return (int) Tokens.KWDIFF
            break;
        case 98: // Recognized '{KWCONS}',	Shortest string "constraint"
return (int) Tokens.KWCONS
            break;
        case 100: // Recognized '{KWCASE}',	Shortest string "case"
return (int) Tokens.KWCASE
            break;
        case 103: // Recognized '{KWBOOL}',	Shortest string "bool"
return (int) Tokens.KWBOOL
            break;
        case 104: // Recognized '{KWIF}',	Shortest string "if"
return (int) Tokens.KWIF
            break;
        case 105: // Recognized '{KWIN}',	Shortest string "in"
return (int) Tokens.KWIN
            break;
        case 106: // Recognized '{KWINT}',	Shortest string "int"
return (int) Tokens.KWINT
            break;
        case 111: // Recognized '{KWINCL}',	Shortest string "include"
return (int) Tokens.KWINCL
            break;
        case 117: // Recognized '{KWINTE}',	Shortest string "intersect"
return (int) Tokens.KWINTE
            break;
        case 119: // Recognized '{KWNOT}',	Shortest string "not"
return (int) Tokens.KWNOT
            break;
        case 121: // Recognized '{KWOF}',	Shortest string "of"
return (int) Tokens.KWOF
            break;
        case 122: // Recognized '{KWOP}',	Shortest string "op"
return (int) Tokens.KWOP
            break;
        case 126: // Recognized '{KWOUTP}',	Shortest string "output"
return (int) Tokens.KWOUTP
            break;
        case 128: // Recognized '{KWXOR}',	Shortest string "xor"
return (int) Tokens.KWXOR
            break;
        case 131: // Recognized '{FLOLI}',	Shortest string "8.8"
        case 132: // Recognized '{FLOLI}',	Shortest string "8e8"
return (int) Tokens.FLOLI
            break;
        case 133: // Recognized '{OPIMPLI}',	Shortest string "->"
return (int) Tokens.OPIMPLI
            break;
        case 134: // Recognized '{OPCASE}',	Shortest string "-->"
return (int) Tokens.OPCASE
            break;
        case 135: // Recognized '{OPRANGE}',	Shortest string ".."
return (int) Tokens.OPRANGE
            break;
        case 136: // Recognized '{DIDENT}',	Shortest string "$t"
return (int) Tokens.DIDENT
            break;
        case 137: // Recognized '{OPANNOT}',	Shortest string "::"
return (int) Tokens.OPANNOT
            break;
        case 148: // Recognized '{KWSYMD}',	Shortest string "symdiff"
return (int) Tokens.KWSYMD
            break;
        case 151: // Recognized '{KWSOLV}',	Shortest string "solve"
return (int) Tokens.KWSOLV
            break;
        case 156: // Recognized '{KWSATI}',	Shortest string "satisfy"
return (int) Tokens.KWSATI
            break;
        case 157: // Recognized '{KWSET}',	Shortest string "set"
return (int) Tokens.KWSET
            break;
        case 164: // Recognized '{KWSUPE}',	Shortest string "superset"
return (int) Tokens.KWSUPE
            break;
        case 167: // Recognized '{KWSUBS}',	Shortest string "subset"
return (int) Tokens.KWSUBS
            break;
        case 171: // Recognized '{KWSTRI}',	Shortest string "string"
return (int) Tokens.KWSTRI
            break;
        case 175: // Recognized '{KWLIST}',	Shortest string "list"
return (int) Tokens.KWLIST
            break;
        case 176: // Recognized '{KWLET}',	Shortest string "let"
return (int) Tokens.KWLET
            break;
        case 179: // Recognized '{KWANN}',	Shortest string "ann"
return (int) Tokens.KWANN
            break;
        case 180: // Recognized '{KWANY}',	Shortest string "any"
return (int) Tokens.KWANY
            break;
        case 187: // Recognized '{KWANNO}',	Shortest string "annotation"
return (int) Tokens.KWANNO
            break;
        case 190: // Recognized '{KWARRA}',	Shortest string "array"
return (int) Tokens.KWARRA
            break;
        case 196: // Recognized '{KWFLOA}',	Shortest string "float"
return (int) Tokens.KWFLOA
            break;
        case 199: // Recognized '{BOOLI}',	Shortest string "true"
return (int) Tokens.BOOLI
            break;
        case 205: // Recognized '{KWFUNC}',	Shortest string "function"
return (int) Tokens.KWFUNC
            break;
        case 211: // Recognized '{KWENDI}',	Shortest string "endif"
return (int) Tokens.KWENDI
            break;
        case 212: // Recognized '{KWENUM}',	Shortest string "enum"
return (int) Tokens.KWENUM
            break;
        case 214: // Recognized '{KWELSE}',	Shortest string "else"
return (int) Tokens.KWELSE
            break;
        case 216: // Recognized '{KWELSI}',	Shortest string "elseif"
return (int) Tokens.KWELSI
            break;
        case 220: // Recognized '{KWUNIO}',	Shortest string "union"
return (int) Tokens.KWUNIO
            break;
        case 225: // Recognized '{KWRECO}',	Shortest string "record"
return (int) Tokens.KWRECO
            break;
        case 232: // Recognized '{KWTHEN}',	Shortest string "then"
return (int) Tokens.KWTHEN
            break;
        case 234: // Recognized '{KWTYPE}',	Shortest string "type"
return (int) Tokens.KWTYPE
            break;
        case 236: // Recognized '{KWTEST}',	Shortest string "test"
return (int) Tokens.KWTEST
            break;
        case 239: // Recognized '{KWTUPL}',	Shortest string "tuple"
return (int) Tokens.KWTUPL
            break;
        case 240: // Recognized '{CFBA}',	Shortest string "|]"
return (int) Tokens.CFBA
            break;
        default:
            break;
    }
#pragma warning restore 162, 1522
#endregion
                    }
                }
        }

#if BACKUP
        void SaveStateAndPos(ref Context ctx) {
            ctx.bPos  = buffer.Pos;
            ctx.rPos  = readPos;
            ctx.cCol  = cCol;
            ctx.lNum  = lNum;
            ctx.state = state;
            ctx.cChr  = code;
        }

        void RestoreStateAndPos(ref Context ctx) {
            buffer.Pos = ctx.bPos;
            readPos = ctx.rPos;
            cCol  = ctx.cCol;
            lNum  = ctx.lNum;
            state = ctx.state;
            code  = ctx.cChr;
        }
#endif  // BACKUP

        // ============= End of the tokenizer code ================

#if STACK        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void yy_clear_stack() { scStack.Clear(); }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int yy_top_state() { return scStack.Peek(); }
        
        internal void yy_push_state(int state)
        {
            scStack.Push(currentScOrd);
            BEGIN(state);
        }
        
        internal void yy_pop_state()
        {
            // Protect against input errors that pop too far ...
            if (scStack.Count > 0) {
				int newSc = scStack.Pop();
				BEGIN(newSc);
            } // Otherwise leave stack unchanged.
        }
 #endif // STACK

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void ECHO() { Console.Out.Write(yytext); }
        
#region UserCodeSection

public IEnumerable<Tokens> Tokenize(Stream stream) {
    int tok;
    do {
        tok = yylex();
        yield return (Tokens) tok;
    } while (tok > (int)Tokens.EOF);
    yield return Tokens.EOF;
}

#endregion
    } // end class $Scanner


} // end namespace
