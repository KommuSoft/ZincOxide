// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  kommusoft-X75VD
// DateTime: 9/21/2013 2:32:39 AM
// UserName: kommusoft
// Input file <MiniZinc.y - 9/21/2013 1:01:08 AM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace ZincOxide.Parser
{
public enum Tokens {
    error=1,EOF=2,KWTYPE=3,KWENUM=4,KWINCL=5,KWCONS=6,
    KWSOLV=7,KWSATI=8,KWMINI=9,KWMAXI=10,KWOUTP=11,KWANNO=12,
    KWPRED=13,KWTEST=14,KWFUNC=15,KWWHER=16,KWVAR=17,KWPAR=18,
    KWBOOL=19,KWINT=20,KWFLOA=21,KWSTRI=22,KWANN=23,KWSET=24,
    KWOF=25,KWARRA=26,KWLIST=27,KWTUPL=28,KWRECO=29,KWANY=30,
    KWOP=31,KWXOR=32,KWIN=33,KWSUBS=34,KWSUPE=35,KWUNIO=36,
    KWDIFF=37,KWSYMD=38,KWINTE=39,KWNOT=40,KWDIV=41,KWMOD=42,
    KWFALS=43,KWTRUE=44,KWIF=45,KWTHEN=46,KWELSI=47,KWELSE=48,
    KWENDI=49,KWCASE=50,KWLET=51,COMMAD=52,COMMA=53,COLON=54,
    ACCENT=55,BAR=56,OACC=57,CACC=58,OBRK=59,CBRK=60,
    OFBR=61,CFBR=62,OFBA=63,CFBA=64,OPASSIG=65,OPUNDSC=66,
    OPEQUIV=67,OPIMPLI=68,OPRIMPL=69,OPVEE=70,OPWEDGE=71,OPLESTA=72,
    OPGRETA=73,OPLESEQ=74,OPGEAEQ=75,OPEQUAL=76,OPNEQUA=77,OPRANGE=78,
    OPINCRE=79,OPANNOT=80,OPADD=81,OPSUB=82,OPMUL=83,OPDOT=84,
    OPDIV=85,OPCASE=86,BOOLI=87,INTLI=88,FLOLI=89,STRLI=90,
    IDENT=91,NOISE=92,EOL=93,COMMENT=94,DIDENT=95};

// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<Scanner,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
public class ScanObj {
  public int token;
  public Scanner yylval;
  public LexLocation yylloc;
  public ScanObj( int t, Scanner val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

public partial class Parser: ShiftReduceParser<Scanner, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[25];
  private static State[] states = new State[47];
  private static string[] nonTerms = new string[] {
      "numExp", "$accept", };

  static Parser() {
    states[0] = new State(new int[]{91,41,88,42,89,43,59,44},new int[]{-1,1});
    states[1] = new State(new int[]{2,2,67,3,68,5,69,7,70,9,71,11,72,13,73,15,74,17,75,19,76,21,77,23,78,25,79,27,80,29,81,31,82,33,83,35,85,37,84,39});
    states[2] = new State(-1);
    states[3] = new State(new int[]{91,41,88,42,89,43,59,44},new int[]{-1,4});
    states[4] = new State(new int[]{67,-6,68,5,69,7,70,9,71,11,72,13,73,15,74,17,75,19,76,21,77,23,78,25,79,27,80,29,81,31,82,33,83,35,85,37,84,39,2,-6,60,-6});
    states[5] = new State(new int[]{91,41,88,42,89,43,59,44},new int[]{-1,6});
    states[6] = new State(new int[]{67,-7,68,-7,69,-7,70,9,71,11,72,13,73,15,74,17,75,19,76,21,77,23,78,25,79,27,80,29,81,31,82,33,83,35,85,37,84,39,2,-7,60,-7});
    states[7] = new State(new int[]{91,41,88,42,89,43,59,44},new int[]{-1,8});
    states[8] = new State(new int[]{67,-8,68,-8,69,-8,70,9,71,11,72,13,73,15,74,17,75,19,76,21,77,23,78,25,79,27,80,29,81,31,82,33,83,35,85,37,84,39,2,-8,60,-8});
    states[9] = new State(new int[]{91,41,88,42,89,43,59,44},new int[]{-1,10});
    states[10] = new State(new int[]{67,-9,68,-9,69,-9,70,-9,71,11,72,13,73,15,74,17,75,19,76,21,77,23,78,25,79,27,80,29,81,31,82,33,83,35,85,37,84,39,2,-9,60,-9});
    states[11] = new State(new int[]{91,41,88,42,89,43,59,44},new int[]{-1,12});
    states[12] = new State(new int[]{67,-10,68,-10,69,-10,70,-10,71,-10,72,13,73,15,74,17,75,19,76,21,77,23,78,25,79,27,80,29,81,31,82,33,83,35,85,37,84,39,2,-10,60,-10});
    states[13] = new State(new int[]{91,41,88,42,89,43,59,44},new int[]{-1,14});
    states[14] = new State(new int[]{67,-11,68,-11,69,-11,70,-11,71,-11,72,13,73,15,74,17,75,19,76,21,77,23,78,25,79,27,80,29,81,31,82,33,83,35,85,37,84,39,2,-11,60,-11});
    states[15] = new State(new int[]{91,41,88,42,89,43,59,44},new int[]{-1,16});
    states[16] = new State(new int[]{67,-12,68,-12,69,-12,70,-12,71,-12,72,13,73,15,74,17,75,19,76,21,77,23,78,25,79,27,80,29,81,31,82,33,83,35,85,37,84,39,2,-12,60,-12});
    states[17] = new State(new int[]{91,41,88,42,89,43,59,44},new int[]{-1,18});
    states[18] = new State(new int[]{67,-13,68,-13,69,-13,70,-13,71,-13,72,13,73,15,74,17,75,19,76,21,77,23,78,25,79,27,80,29,81,31,82,33,83,35,85,37,84,39,2,-13,60,-13});
    states[19] = new State(new int[]{91,41,88,42,89,43,59,44},new int[]{-1,20});
    states[20] = new State(new int[]{67,-14,68,-14,69,-14,70,-14,71,-14,72,13,73,15,74,17,75,19,76,21,77,23,78,25,79,27,80,29,81,31,82,33,83,35,85,37,84,39,2,-14,60,-14});
    states[21] = new State(new int[]{91,41,88,42,89,43,59,44},new int[]{-1,22});
    states[22] = new State(new int[]{67,-15,68,-15,69,-15,70,-15,71,-15,72,13,73,15,74,17,75,19,76,21,77,23,78,25,79,27,80,29,81,31,82,33,83,35,85,37,84,39,2,-15,60,-15});
    states[23] = new State(new int[]{91,41,88,42,89,43,59,44},new int[]{-1,24});
    states[24] = new State(new int[]{67,-16,68,-16,69,-16,70,-16,71,-16,72,13,73,15,74,17,75,19,76,21,77,23,78,25,79,27,80,29,81,31,82,33,83,35,85,37,84,39,2,-16,60,-16});
    states[25] = new State(new int[]{91,41,88,42,89,43,59,44},new int[]{-1,26});
    states[26] = new State(new int[]{67,-17,68,-17,69,-17,70,-17,71,-17,72,-17,73,-17,74,-17,75,-17,76,-17,77,-17,78,25,79,27,80,29,81,31,82,33,83,35,85,37,84,39,2,-17,60,-17});
    states[27] = new State(new int[]{91,41,88,42,89,43,59,44},new int[]{-1,28});
    states[28] = new State(new int[]{67,-18,68,-18,69,-18,70,-18,71,-18,72,-18,73,-18,74,-18,75,-18,76,-18,77,-18,78,-18,79,27,80,29,81,-18,82,-18,83,-18,85,-18,84,39,2,-18,60,-18});
    states[29] = new State(new int[]{91,41,88,42,89,43,59,44},new int[]{-1,30});
    states[30] = new State(new int[]{67,3,68,5,69,7,70,9,71,11,72,13,73,15,74,17,75,19,76,21,77,23,78,25,79,27,80,29,81,31,82,33,83,35,85,37,84,39,2,-19,60,-19});
    states[31] = new State(new int[]{91,41,88,42,89,43,59,44},new int[]{-1,32});
    states[32] = new State(new int[]{67,-20,68,-20,69,-20,70,-20,71,-20,72,-20,73,-20,74,-20,75,-20,76,-20,77,-20,78,-20,79,27,80,29,81,-20,82,-20,83,35,85,37,84,39,2,-20,60,-20});
    states[33] = new State(new int[]{91,41,88,42,89,43,59,44},new int[]{-1,34});
    states[34] = new State(new int[]{67,-21,68,-21,69,-21,70,-21,71,-21,72,-21,73,-21,74,-21,75,-21,76,-21,77,-21,78,-21,79,27,80,29,81,-21,82,-21,83,35,85,37,84,39,2,-21,60,-21});
    states[35] = new State(new int[]{91,41,88,42,89,43,59,44},new int[]{-1,36});
    states[36] = new State(new int[]{67,-22,68,-22,69,-22,70,-22,71,-22,72,-22,73,-22,74,-22,75,-22,76,-22,77,-22,78,-22,79,27,80,29,81,-22,82,-22,83,-22,85,-22,84,39,2,-22,60,-22});
    states[37] = new State(new int[]{91,41,88,42,89,43,59,44},new int[]{-1,38});
    states[38] = new State(new int[]{67,-23,68,-23,69,-23,70,-23,71,-23,72,-23,73,-23,74,-23,75,-23,76,-23,77,-23,78,-23,79,27,80,29,81,-23,82,-23,83,-23,85,-23,84,39,2,-23,60,-23});
    states[39] = new State(new int[]{91,41,88,42,89,43,59,44},new int[]{-1,40});
    states[40] = new State(new int[]{67,3,68,5,69,7,70,9,71,11,72,13,73,15,74,17,75,19,76,21,77,23,78,25,79,27,80,29,81,31,82,33,83,35,85,37,84,39,2,-24,60,-24});
    states[41] = new State(-2);
    states[42] = new State(-3);
    states[43] = new State(-4);
    states[44] = new State(new int[]{91,41,88,42,89,43,59,44},new int[]{-1,45});
    states[45] = new State(new int[]{60,46,67,3,68,5,69,7,70,9,71,11,72,13,73,15,74,17,75,19,76,21,77,23,78,25,79,27,80,29,81,31,82,33,83,35,85,37,84,39});
    states[46] = new State(-5);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{91});
    rules[3] = new Rule(-1, new int[]{88});
    rules[4] = new Rule(-1, new int[]{89});
    rules[5] = new Rule(-1, new int[]{59,-1,60});
    rules[6] = new Rule(-1, new int[]{-1,67,-1});
    rules[7] = new Rule(-1, new int[]{-1,68,-1});
    rules[8] = new Rule(-1, new int[]{-1,69,-1});
    rules[9] = new Rule(-1, new int[]{-1,70,-1});
    rules[10] = new Rule(-1, new int[]{-1,71,-1});
    rules[11] = new Rule(-1, new int[]{-1,72,-1});
    rules[12] = new Rule(-1, new int[]{-1,73,-1});
    rules[13] = new Rule(-1, new int[]{-1,74,-1});
    rules[14] = new Rule(-1, new int[]{-1,75,-1});
    rules[15] = new Rule(-1, new int[]{-1,76,-1});
    rules[16] = new Rule(-1, new int[]{-1,77,-1});
    rules[17] = new Rule(-1, new int[]{-1,78,-1});
    rules[18] = new Rule(-1, new int[]{-1,79,-1});
    rules[19] = new Rule(-1, new int[]{-1,80,-1});
    rules[20] = new Rule(-1, new int[]{-1,81,-1});
    rules[21] = new Rule(-1, new int[]{-1,82,-1});
    rules[22] = new Rule(-1, new int[]{-1,83,-1});
    rules[23] = new Rule(-1, new int[]{-1,85,-1});
    rules[24] = new Rule(-1, new int[]{-1,84,-1});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

/*
 * All the code is in the helper file RealTreeHelper.cs
 */ 
}
}
